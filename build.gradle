plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
    id 'org.sonarqube' version '3.5.0.2730'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'

    compileOnly 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'



    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.7.2'

    testImplementation group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.2'

    testRuntimeOnly "org.junit.platform:junit-platform-commons:1.9.0"

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.7.2'

}

test {
    useJUnitPlatform()
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacoco.exec")
    }
    finalizedBy jacocoTestReport
}

jacoco {
    toolVersion = '0.8.5'
}


jacocoTestReport {
    dependsOn test
    reports {
        html.enabled true
        xml.enabled true
        csv.enabled true

        html.destination file("src/jacoco/jacoco.html")
        xml.destination file("src/jacoco/jacoco.xml")
    }
    finalizedBy 'jacocoTestCoverageVerification'
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            enabled = true

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.10
            }
        }
    }
}

sonar {
    properties {
        property "sonar.projectKey", "sonartest"
    }
}

bootJar {
    mainClassName = 'com.example.property.PropertyApplication'
}

//profiles 설정
bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
}